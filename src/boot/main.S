global start
extern long_mode_start
section .text
bits 32
start:
    mov esp, stack_top
    call check_multiboot
    call check_cpuid
    call check_longmode

    call setup_page_tables
    call enable_paging

    lgdt [gdt64.pointer]
    jmp gdt64.code_segment:long_mode_start

check_multiboot:
    cmp eax, 0x36d76289
    jne .no_multiboot
    ret
.no_multiboot:
    mov al, "M"
    jmp error


check_cpuid:
    ; if we can flip ID bit, the CPUID is supported
    pushfd ; flag register to stack
    pop eax ; and pop it to eax
    mov ecx, eax ; copy it to ecx too, so eax and ecx contains same data
    xor eax, 1 << 21 ; flip the ID bit
    push eax ; push modified eax back to stack
    popfd ; and pop it to flag register
    pushfd ; and push flag register again back to stack
    pop eax ; pop it to eax
    push ecx ; push ecx instead of eax to stack
    popfd ; and set it to flag register
    cmp eax, ecx ; compare
    je .no_cpuid ; if they are equal, that means the bit wasn't flipped and CPUID is not supported.
    ret

.no_cpuid:
    mov al, "C"
    jmp error
    

check_longmode:
    mov eax, 0x80000000
    cpuid
    cmp eax, 0x80000001
    jb .no_longmode ; if it less, there is no long mode

    ;extended function is available
    mov eax, 0x80000001
    cpuid
    test edx, 1 << 29 ; test if tje LM bit is set to edx.
    jz .no_longmode
    ret

.no_longmode:
    mov al, "L"
    jmp error

setup_page_tables:
    ; disable old pages (if any)
    mov eax, cr0
    and eax, 01111111111111111111111111111111b
    mov cr0, eax


    mov eax, page_table_l3
    or eax, 0b11 ; present, writeable
    mov [page_table_l4], eax

    mov eax, page_table_l2
    or eax, 0b11 ; present, writeable
    mov [page_table_l3], eax

    mov ecx, 0 ; counter
.loop:

    mov eax, 0x200000 ; 2mb
    mul ecx
    or eax, 0b10000011 ; present, writeable, huge page
    mov [page_table_l2 + ecx * 8], eax


    inc ecx
    cmp ecx, 512
    jne .loop

    ret

enable_paging:
    ; pass page table location to cpu
    mov eax, page_table_l4
    mov cr3, eax

    ; enable PAE
    mov eax, cr4
    or eax, 1 << 5
    mov cr4, eax

    ; enable long mode
    mov ecx, 0xC0000080
    rdmsr
    or eax, 1 << 8
    wrmsr

    ; enable paging
    mov eax, cr0
    or eax, 1 << 31
    mov cr0, eax
    ret


error:
    ; print error
    mov dword [0xb8000], 0x4f524f45
    mov dword [0xb0004], 0x4f3a4f52
    mov dword [0xb0008], 0x4f204f20
    mov byte [0xb000a], al
    hlt



section .bss
align 4096
page_table_l4:
    resb 4096
page_table_l3:
    resb 4096
page_table_l2:
    resb 4096

stack_bottom:
    resb 4096 * 4
stack_top:

section .rodata
gdt64:
	dq 0 ; zero entry
.code_segment: equ $ - gdt64
	dq (1 << 43) | (1 << 44) | (1 << 47) | (1 << 53) ; code segment
.pointer:
	dw $ - gdt64 - 1 ; length
	dq gdt64 ; address